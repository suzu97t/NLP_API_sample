path = './data.pdf'
pdf_to_text(path)


from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.pdfpage import PDFPage
from pdfminer.layout import LAParams, LTTextContainer
from pdfminer.converter import PDFPageAggregator
from collections import deque
import pdfplumber
import pandas as pd

# path = './data.pdf'
def pdf_to_text(path):
    manager = PDFResourceManager()


    with open(path, 'rb') as input:
        with PDFPageAggregator(manager, laparams=LAParams()) as device:
            with pdfplumber.open(path) as pdf:

                # PDFPageInterpreterオブジェクトの取得
                iprtr = PDFPageInterpreter(manager, device)
                # ページごとで処理を実行
                for num_page,page in enumerate(PDFPage.get_pages(input)):
                    print(num_page)
                    # if num_page <5:
                    #     continue
                    table_positions = []

                    table_idx = 0

                    tables = pdf.pages[num_page].extract_tables()
                    num_tables = len(tables)
                            
                    if tables:
                        df_tables = []
                
                        for t in range(num_tables):
                            df_tmp = pd.DataFrame(tables[t])

                            df_tables.append(df_tmp)

                        h_edges = []
                        v_edges = []
                        for x in pdf.pages[num_page].debug_tablefinder().edges:
                            if x['orientation'] == 'h':
                                h_edges.append([x['x0'], x['y0'], x['x1'], x['y1']])
                            else:
                                v_edges.append([x['x0'], x['y0'], x['x1'], x['y1']])

                        table_positions = get_table_positions(h_edges, v_edges)
                        table_tops = []
                        for t in table_positions:
                            table_tops.append(t[3])

                        if len(table_positions) != num_tables:
                            num_tables = min(len(table_positions), num_tables)



                    iprtr.process_page(page)
                    # ページ内の各テキストのレイアウト
                    layouts = device.get_result()
                    for layout in layouts:
                        # 罫線などのオブジェクトが含まれているとエラーになるのを防ぐため
                        if isinstance(layout, LTTextContainer):
                            # 各ページの左下を原点としている
                            # x0: テキストの左端のx座標
                            # x1: テキストの右端のx座標
                            # y0: テキストの下端のy座標
                            # y1: テキストの上端のy座標
                            # width: テキストの幅(x1 - x0)
                            # height: テキストの高さ(y1 - y0)
                            is_in_table = False
                            for pos in table_positions:
                                flag = pos[0] < layout.x0 and pos[2] > layout.x0 and pos[1] < layout.y0 and pos[3] > layout.y0
                                # flag2 = pos[0] < layout.x1 and pos[2] > layout.x1 and pos[1] < layout.y1 and pos[3] > layout.y1
                                if flag:
                                    is_in_table = True
                            # if 32.751738915344156 < layout.x0 and layout.x0 < 557.2454220134398 and layout.y0 > 169.49611731766174 and layout.y0 < 224.27156633935112:
                            if is_in_table == False:
                                while( num_tables>=(table_idx+1) and layout.y1 < table_tops[table_idx]):
                                    # print("table")
                                    print(df_table_to_text(df_tables[table_idx]))
                                    table_idx+=1
                                print(layout.get_text().strip())
                                # print(f'{layout.get_text().strip()}, x0={layout.x0:.2f}, x1={layout.x1:.2f}, y0={layout.y0:.2f}, y1={layout.y1:.2f}')



import numpy as np
def distance_between_two_points(a,b, x,y):
    return np.abs(a-x) + np.abs(b-y)

def find_min_distance_point(x,y, candidates):
    min_distance = 99999
    min_dis_point_x = 0
    min_dis_point_y = 0

    min_dis_point_x_pair = 0
    min_dis_point_y_pair = 0

    for c in candidates:
        dis = distance_between_two_points(c[0],c[1], x,y)
        if dis < min_distance:
            min_distance = dis
            min_dis_point_x = c[0]
            min_dis_point_y = c[1]
            min_dis_point_x_pair = c[2]
            min_dis_point_y_pair = c[3]
        dis = distance_between_two_points(c[2],c[3], x,y)
        if dis < min_distance:
            min_distance = dis
            min_dis_point_x = c[2]
            min_dis_point_y = c[3]
            min_dis_point_x_pair = c[0]
            min_dis_point_y_pair = c[1]
    return min_distance, min_dis_point_x, min_dis_point_y, min_dis_point_x_pair, min_dis_point_y_pair


def get_table_positions(h_edges, v_edges):
    table_positions = []
    for h in h_edges:
        min_x, min_y = min(h[0],h[2]), min(h[1],h[3])
        max_x, max_y = max(h[0],h[2]), max(h[1],h[3])
        
        min_distance, min_dis_point_x, min_dis_point_y, min_dis_point_x_pair, min_dis_point_y_pair = find_min_distance_point(h[0],h[1], v_edges)
    
        if min_distance > 2:
            continue
        
        min_distance, min_dis_point_x, min_dis_point_y, min_dis_point_x_pair, min_dis_point_y_pair = find_min_distance_point(min_dis_point_x_pair, min_dis_point_y_pair, h_edges)

        min_x, min_y = min(min_x, min_dis_point_x, min_dis_point_x_pair), min(min_y ,min_dis_point_y, min_dis_point_y_pair)
        max_x, max_y = max(max_x, min_dis_point_x, min_dis_point_x_pair), max(max_y ,min_dis_point_y, min_dis_point_y_pair)

        if min_distance > 2:
            continue
        
        min_distance, min_dis_point_x, min_dis_point_y, min_dis_point_x_pair, min_dis_point_y_pair = find_min_distance_point(min_dis_point_x_pair, min_dis_point_y_pair, v_edges)

        if min_distance > 2:
            continue

        min_distance, min_dis_point_x, min_dis_point_y, min_dis_point_x_pair, min_dis_point_y_pair = find_min_distance_point(min_dis_point_x_pair, min_dis_point_y_pair, h_edges)

        if min_dis_point_x == h[2]and min_dis_point_y== h[3] and min_dis_point_x_pair == h[0] and min_dis_point_y_pair == h[1]:
        
            if [min_x, min_y, max_x, max_y] not in table_positions:
                table_positions.append([min_x, min_y, max_x, max_y])
    return table_positions


def df_table_to_text(df_table):
    num_rows = len(df_table)
    num_cols = len(df_table.columns)
    text = '\n'
    for i in range(num_rows):
        for j in range(num_cols):
            if j!= num_cols-1:
                if df_table.isna().iloc[i,j]:
                    cell_value = ""
                else:
                    cell_value = df_table.iloc[i,j].replace("\n", "")
                text += f'|{cell_value}'
            else:
                if df_table.isna().iloc[i,j]:
                    cell_value = ""
                else:
                    cell_value = df_table.iloc[i,j].replace("\n", "")
                text += f'|{cell_value}|\n'
    return text
